package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.NuGetFeedCredentials
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.nuGetFeedCredentials
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.NuGetPublishStep
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.nuGetPublish
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.powerShell
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.FinishBuildTrigger
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.finishBuildTrigger
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'DeployInstallerBuild'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("DeployInstallerBuild")) {
    expectSteps {
        nuGetPublish {
            name = "Publish NuGet Packages to Azure Artifacts"
            toolPath = "%teamcity.tool.NuGet.CommandLine.DEFAULT%"
            packages = "**/*.nupkg"
            serverUrl = "%azureArtifacts.feed.nuget%"
            apiKey = "%octopus.apiKey%"
            args = "-SkipDuplicate"
        }
        powerShell {
            name = "Create Release and Deploy to Integration"
            formatStderrAsError = true
            scriptMode = script {
                content = """
                    Write-Host ${'$'}( '##teamcity[message text=''octopus.release.version => {0}'']' -f "%octopus.release.version%" )
                    
                    ${'$'}parameters = @(
                        "create-release",
                        "--server=%octopus.server%",
                        "--project=%octopus.release.project%",
                        "--defaultPackageVersion=%octopus.release.version%",
                        "--releaseNumber=%octopus.release.version%",
                        "--deployTo=%octopus.release.environment%"
                        "--deploymenttimeout=%octopus.deploy.timeout%",
                        "--apiKey=%octopus.apiKey%"
                    )
                    octo.exe @parameters
                    
                    exit ${'$'}LASTEXITCODE
                """.trimIndent()
            }
        }
    }
    steps {
        update<NuGetPublishStep>(0) {
            apiKey = "credentialsJSON:a6d48763-5649-4d41-a824-8673ac64e7e3"
        }
    }

    triggers {
        val trigger1 = find<FinishBuildTrigger> {
            finishBuildTrigger {
                buildType = "EdFi_AnalyticsTeam_FixItFriday_BranchInstallerBuild"
                successfulOnly = true
            }
        }
        trigger1.apply {
            enabled = false
        }
    }

    features {
        val feature1 = find<NuGetFeedCredentials> {
            nuGetFeedCredentials {
                feedUrl = "%azureArtifacts.feed.nuget%"
                username = "%azureArtifacts.edFiBuildAgent.userName%"
                password = "%azureArtifacts.edFiBuildAgent.accessToken%"
            }
        }
        feature1.apply {
            password = "credentialsJSON:69bd3984-52ac-46b9-9453-254be0950822"
        }
    }
}
